name: Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.md'
      - '**.go'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**.md'
      - '**.go'
  schedule:
    # Run weekly on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  check-spelling:
    name: Check Spelling
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Simple spell check
      run: |
        echo "Checking spelling in documentation..."
        find . -name '*.md' -exec grep -i "recieve\|seperate\|teh\|hte\|wich" {} + || true
        echo "Basic spelling check completed."
      continue-on-error: true

  lint-docs:
    name: Lint Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check documentation files exist
      run: |
        echo "Checking documentation files..."
        ls -la *.md || true
        echo "Documentation check completed."

  validate-examples:
    name: Validate Code Examples
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check code examples
      run: |
        echo "Checking code examples in documentation..."
        find . -name '*.md' -exec grep -l '```' {} \; | while read file; do
          echo "Found code blocks in $file"
        done
        echo "Code examples check completed."

  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [lint-docs, check-spelling]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Install bc for calculations
      run: sudo apt-get update && sudo apt-get install -y bc
    
    - name: Update documentation metrics
      run: |
        # Count lines of documentation
        DOC_LINES=$(find . -name '*.md' -not -path './.git/*' -exec wc -l {} + | tail -1 | awk '{print $1}' || echo "0")
        CODE_LINES=$(find . -name '*.go' -not -path './.git/*' -exec wc -l {} + | tail -1 | awk '{print $1}' || echo "1")
        
        # Calculate documentation ratio (avoid division by zero)
        if [ "$CODE_LINES" -gt 0 ]; then
          DOC_RATIO=$(echo "scale=2; $DOC_LINES / $CODE_LINES * 100" | bc -l)
        else
          DOC_RATIO="0.00"
        fi
        
        echo "Documentation lines: $DOC_LINES"
        echo "Code lines: $CODE_LINES"
        echo "Documentation ratio: ${DOC_RATIO}%"

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [generate-docs, validate-examples]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Install dependencies
      run: |
        npm install -g markdown-to-html-cli || echo "Warning: markdown-to-html-cli installation failed"
    
    - name: Build documentation site
      run: |
        mkdir -p _site
        
        # Simple HTML conversion
        if command -v markdown-to-html &> /dev/null; then
          markdown-to-html --source README.md --output _site/index.html || cp README.md _site/index.html
          markdown-to-html --source DOCUMENTATION.md --output _site/documentation.html || cp DOCUMENTATION.md _site/documentation.html
          markdown-to-html --source CONTRIBUTING.md --output _site/contributing.html || cp CONTRIBUTING.md _site/contributing.html
        else
          # Fallback: create simple HTML files
          echo "<html><head><title>Axon</title></head><body><h1>Axon</h1><pre>$(cat README.md)</pre></body></html>" > _site/index.html
          echo "<html><head><title>Documentation</title></head><body><h1>Documentation</h1><pre>$(cat DOCUMENTATION.md)</pre></body></html>" > _site/documentation.html
          echo "<html><head><title>Contributing</title></head><body><h1>Contributing</h1><pre>$(cat CONTRIBUTING.md)</pre></body></html>" > _site/contributing.html
        fi
        
        # Create simple API docs
        mkdir -p _site/api
        echo "<html><head><title>API Documentation</title></head><body><h1>Axon API Documentation</h1><p>API documentation will be available here.</p></body></html>" > _site/api/index.html
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

