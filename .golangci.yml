# golangci-lint configuration for Axon

# Options for analysis running.
run:
  # Timeout for analysis, e.g. 30s, 5m.
  timeout: 5m
  
  # Exit code when at least one issue was found.
  issues-exit-code: 1
  
  # Include test files or not.
  tests: true
  
  # List of build tags, all linters use it.
  build-tags:
    - integration
  
  # Which dirs to skip: issues from them won't be reported.
  skip-dirs:
    - vendor
    - testdata
    - build
    - dist
  
  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_gen\\.go$"

# Output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  format: colored-line-number
  
  # Print lines of code with issue.
  print-issued-lines: true
  
  # Print linter name in the end of issue text.
  print-linter-name: true
  
  # Make issues output unique by line.
  uniq-by-line: true
  
  # Add a prefix to the output file references.
  path-prefix: ""
  
  # Sort results by: filepath, line and column.
  sort-results: true

# All available settings of specific linters.
linters-settings:
  dupl:
    # Tokens count to trigger issue.
    threshold: 100
  
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    check-type-assertions: true
    
    # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    check-blank: true
  
  exhaustive:
    check-generated: false
    default-signifies-exhaustive: false
  
  funlen:
    lines: 100
    statements: 50
  
  gci:
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/axon-project/axon) # Custom section: groups all imports with the specified Prefix.
  
  gocognit:
    # Minimal code complexity to report.
    min-complexity: 15
  
  goconst:
    # Minimal length of string constant.
    min-len: 3
    
    # Minimum occurrences of constant string count to trigger issue.
    min-occurrences: 3
  
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    enabled-checks:
      - argOrder
      - badCond
      - caseOrder
      - codegenComment
      - commentedOutCode
      - deprecatedComment
      - dupArg
      - dupBranchBody
      - dupCase
      - dupSubExpr
      - exitAfterDefer
      - flagDeref
      - flagName
      - nilValReturn
      - offBy1
      - regexpMust
      - sloppyReassign
      - weakCond
      - octalLit
    
    settings:
      captLocal:
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32
  
  gofmt:
    # Simplify code: gofmt with `-s` option.
    simplify: true
  
  goimports:
    # Put imports beginning with prefix after 3rd-party packages.
    local-prefixes: github.com/axon-project/axon
  
  revive:
    # Minimal confidence for issues.
    min-confidence: 0.8
  
  gomnd:
    settings:
      mnd:
        # List of numbers to exclude from analysis.
        ignored-numbers: "0,1,2,3"
        # List of file patterns to exclude from analysis.
        ignored-files: "*_test.go"
        # List of function patterns to exclude from analysis.
        ignored-functions: "math.*"
  
  govet:
    # Report about shadowed variables.
    check-shadowing: true
    
    # Settings per analyzer.
    settings:
      printf:
        # Comma-separated list of print function names to check.
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
    
    # Enable or disable analyzers by name.
    enable:
      - atomicalign
    enable-all: false
    disable:
      - shadow
    disable-all: false
  
  lll:
    # Max line length, lines longer will be reported.
    line-length: 120
  
  maligned:
    # Print struct with more effective memory layout or not.
    suggest-new: true
  
  misspell:
    # Correct spellings using locale preferences for US or UK.
    locale: US
  
  nolintlint:
    # Enable to ensure that nolint directives are all used.
    allow-unused: false
    
    # Disable to ensure that nolint directives don't have a leading space.
    allow-leading-space: true
    
    # Exclude following linters from requiring an explanation.
    allow-no-explanation: []
    
    # Enable to require an explanation of nonzero length after each nolint directive.
    require-explanation: false
    
    # Enable to require nolint directives to mention the specific linter being suppressed.
    require-specific: true
  
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    simple: true
    range-loops: true
    for-loops: false
  
  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx
  
  testpackage:
    # Regexp pattern to skip files.
    skip-regexp: (export|internal)_test\.go
  
  unparam:
    # Inspect exported functions.
    check-exported: false
  
  unused:
    # Treat code as a program (not a library) and report unused exported identifiers.
    check-exported: false
  
  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement.
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature.
  
  wsl:
    # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for documentation.
    strict-append: true
    allow-assign-and-call: true
    allow-multiline-assign: true
    allow-cuddle-declarations: false
    allow-trailing-comment: false
    force-case-trailing-whitespace: 0
    force-err-cuddling: false
    allow-separated-leading-comment: false

linters:
  enable:
    - bodyclose
    - depguard
    - dogsled
    - dupl
    - errcheck
    - exhaustive
    - funlen
    - gochecknoinits
    - goconst
    - gocritic
    - gocyclo
    - gofmt
    - goimports
    - revive
    - gomnd
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - misspell
    - nakedret
    - noctx
    - nolintlint
    - prealloc
    - rowserrcheck
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - whitespace
    - wsl
  
  disable:
    - maligned
    - gochecknoglobals
  
  # Don't use `enable-all: true`, it's deprecated and can be removed at any time.
  enable-all: false
  disable-all: false
  
  # Run only fast linters from enabled linters set (first run won't be fast)
  fast: false

issues:
  # List of regexps of issue texts to exclude.
  exclude:
    # Exclude some linters from running on tests files.
    - "G404: Use of weak random number generator" # We're okay with math/rand in tests
    - "G601: Implicit memory aliasing in for loop" # Common in table tests
  
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - path: _test\.go
      linters:
        - gomnd
        - funlen
        - gocyclo
        - errcheck
        - dupl
        - gosec
    
    - path: internal/testdata/
      linters:
        - gomnd
        - goconst
        - funlen
    
    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "
    
    # Exclude known linters from partially hard-to-fix issues
    - linters:
        - stylecheck
      text: "ST1000:" # package comment
    
    - linters:
        - gocritic
      text: "unnecessaryDefer:"
  
  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  exclude-use-default: false
  
  # If set to true exclude and exclude-rules regular expressions become case sensitive.
  exclude-case-sensitive: false
  
  # The list of ids of default excludes to include or disable.
  include:
    - EXC0002 # disable excluding of issues about comments from golint
  
  # Maximum issues count per one linter.
  max-issues-per-linter: 50
  
  # Maximum count of issues with the same text.
  max-same-issues: 3
  
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, e.g. with --new-from-rev=HEAD~1.
  new: false
  
  # Show only new issues created after git revision `REV`.
  new-from-rev: ""
  
  # Show only new issues created in git patch with set file path.
  new-from-patch: ""
  
  # Fix found issues (if it's supported by the linter).
  fix: false

severity:
  # Default value is empty string.
  default-severity: error
  
  # If set to true severity-rules regular expressions become case sensitive.
  case-sensitive: false
  
  # Default value is empty list.
  rules:
    - linters:
        - dupl
      severity: info

